datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["groupBy", "createMany"]
}

enum UserStatus {
  enabled
  disabled
}

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  email         String     @unique
  fullName      String
  avatarUrl     String?
  status        UserStatus @default(disabled)
  emailVerified Boolean    @default(false)
  disabledAt    DateTime?
  lastLoginAt   DateTime?
  profile       Profile?
  followers     User[]     @relation("UserFollows", references: [id])
  following     User[]     @relation("UserFollows", references: [id])
  posts         Post[]
  likes         Like[]
  comments      Comment[]
}

enum Gender {
  male
  female
  other
}

model Profile {
  id       String    @id @default(cuid())
  bio      String    @default("")
  gender   Gender?
  birthDay DateTime?
  phone    String?
  userId   String
  user     User      @relation(fields: [userId], references: [id])
}

model Post {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     String
  isPublished Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  likes       Like[]
  comments    Comment[]
}

enum LikeType {
  like
  heart
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      LikeType @default(like)
  userId    String
  postId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  body      String
  userId    String
  postId    String
  commentId String
  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
  comment   Comment   @relation("CommentReplies", fields: [commentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     Like[]
}
